name: Codex Full Auto (Final and Generic)

on:
  workflow_dispatch:
    inputs:
      CODEX_PROMPT:
        description: 'The main instruction/prompt for the AI.'
        required: true
        default: 'Create a simple placeholder file.'
      TICKET_ID:
        description: 'The Jira/Ticket ID for branch naming and commits.'
        required: true
        default: 'default-ticket-id'
      CODEX_MODEL:
        description: 'The AI model to use (e.g., o3, gpt-4-turbo).'
        required: true
        default: 'o3'
      JIRA_IMAGE_URLS:
        description: 'Comma-separated list of image URLs from Jira.'
        required: false
      JIRA_IMAGE_FILENAMES:
        description: 'Comma-separated list of original image filenames from Jira.'
        required: false
      RUN_AEM_STEPS:
        description: 'Run AEM preview steps (9–13)?'
        required: false
        default: 'false'
  repository_dispatch:
    types: [codex-run]

jobs:
  codex-full-auto:
    runs-on: ubuntu-latest
    container: node:latest

    env:
      # Secrets for operation

      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      JIRA_API_USER: ${{ secrets.JIRA_API_USER }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      CODEX_PUSH_TOKEN: ${{ secrets.CODEX_PUSH_TOKEN }}
     
      # Inputs from dispatch events
      CODEX_PROMPT: |
        ${{ github.event.inputs.CODEX_PROMPT || github.event.client_payload.CODEX_PROMPT }}
      TICKET_ID: ${{ github.event.inputs.TICKET_ID || github.event.client_payload.TICKET_ID }}
      CODEX_MODEL: ${{ github.event.inputs.CODEX_MODEL || github.event.client_payload.CODEX_MODEL }}
      JIRA_IMAGE_URLS: ${{ github.event.inputs.JIRA_IMAGE_URLS || github.event.client_payload.JIRA_IMAGE_URLS }}
      JIRA_IMAGE_FILENAMES: ${{ github.event.inputs.JIRA_IMAGE_FILENAMES || github.event.client_payload.JIRA_IMAGE_FILENAMES }}
      RUN_AEM_STEPS: ${{ github.event.inputs.RUN_AEM_STEPS || github.event.client_payload.RUN_AEM_STEPS || 'false' }}

      # Repository context
      GH_REPO: ${{ github.repository }}
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}

    steps:
      - name: 1. Install System Dependencies
        run: |
          apt-get update -y && apt-get install -y --no-install-recommends curl jq sed file

      - name: 2. Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.CODEX_PUSH_TOKEN }}
          fetch-depth: 0

      - name: 3. Configure Git and Install Codex CLI
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions-bot@github.com"
          npm install -g @openai/codex

      - name: 4. Install Project Dependencies
        run: npm install

      - name: 5. Set Workspace Permissions for Non-Root User
        run: |
          chown -R node:node "$GITHUB_WORKSPACE"

      - name: 7. Execute Main AI, Build, and Git Logic
        id: main_script
        shell: bash
        env:
          DEMO_DATA_PROMPT: |
            ---
            **Additional Task: xxx**
            
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          FEATURE_BRANCH_NAME="feature/$TICKET_ID"
          git checkout -b "$FEATURE_BRANCH_NAME" "origin/$DEFAULT_BRANCH"
          
          FINAL_PROMPT="${CODEX_PROMPT}${DEMO_DATA_PROMPT}"
          CODEX_CMD_ARGS=("--full-auto" "-m" "$CODEX_MODEL")
          
          if [ -n "$JIRA_IMAGE_URLS" ] && [ "$JIRA_IMAGE_URLS" != "none" ]; then
            IFS=',' read -ra IMAGE_URL_ARRAY <<< "$JIRA_IMAGE_URLS"
            IFS=',' read -ra IMAGE_FILENAME_ARRAY <<< "$JIRA_IMAGE_FILENAMES"
            for (( i=0; i<${#IMAGE_URL_ARRAY[@]}; i++ )); do
              IMG_URL=$(echo "${IMAGE_URL_ARRAY[$i]}" | xargs)
              SAFE_FILENAME=$(echo "${IMAGE_FILENAME_ARRAY[$i]}" | xargs | sed 's/[^a-zA-Z0-9._-]/_/g')
              if [ -z "$IMG_URL" ] || [ -z "$SAFE_FILENAME" ]; then continue; fi
              DOWNLOAD_PATH="jira_dl_image_${i}_${SAFE_FILENAME}"
              HTTP_STATUS=$(curl -sSL -w "%{http_code}" -o "$DOWNLOAD_PATH" -u "${JIRA_API_USER}:${JIRA_API_TOKEN}" "$IMG_URL")
              if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ] && [ -s "$DOWNLOAD_PATH" ]; then
                CODEX_CMD_ARGS+=("-i" "$DOWNLOAD_PATH")
              fi
            done
          fi
          
          # This command now automatically uses the Figma MCP server whenever a figma.com URL is in the prompt
          codex exec "${CODEX_CMD_ARGS[@]}" "$FINAL_PROMPT"
          
          rm -f jira_dl_image_*
          echo "Compiling EDS Models..."
          
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "feat($TICKET_ID): Apply AI-generated changes [skip ci]"
            git push -u origin "$FEATURE_BRANCH_NAME"
            echo "changes_pushed=true" >> $GITHUB_OUTPUT
          else
            echo "No file changes detected."
            echo "changes_pushed=false" >> $GITHUB_OUTPUT
          fi


      # --- Steps 8–13 remain in file but 9–13 are gated OFF by default (RUN_AEM_STEPS=false) ---

      - name: 8. Sanitize Ticket ID for AEM
        id: sanitize
        if: steps.main_script.outputs.changes_pushed == 'true'
        run: |
          SANITIZED_NAME=$(echo "${TICKET_ID}" | sed 's/\//-/g')
          echo "aem_page_name=$SANITIZED_NAME" >> $GITHUB_OUTPUT
